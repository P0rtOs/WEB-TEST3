import { z } from 'zod';

// –ù–æ—Ä–º–∞–ª—ñ–∑—É—î —Ä—è–¥–æ–∫: —Ç—Ä—ñ–º —ñ –∑–∞–º—ñ–Ω–∞ –¥–∞–±–ª-–ø—Ä–æ–±—ñ–ª—ñ–≤
const normalizeString = (str: string) => str.trim().replace(/\s{2,}/g, ' ');

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø—É—Å—Ç—ñ —Å—Ç—Ä–æ–∫–∏ –∑ –æ—á–∏—â–µ–Ω–Ω—è–º
const nonEmptyCleanString = (fieldName: string) =>
  z
    .string()
    .refine(val => val.trim().replace(/\s{2,}/g, ' ').length > 0, {
      message: `${fieldName} is required`,
    })
    .refine(val => val.trim() !== ' ', {
      message: `${fieldName} cannot be a single space`,
    })
    .transform(normalizeString);

// –ü–∞—Ä–æ–ª—å ‚Äî –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤, –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤
const passwordSchema = z
  .string()
  .min(6, 'Password must be at least 6 characters')
  .refine(val => !/\s/.test(val), { message: 'Password cannot contain spaces' });

// Email ‚Äî –≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç, –æ—á–∏—â–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
const emailSchema = z
  .string()
  .email('Invalid email address')
  .transform(normalizeString);

// –°—Ö–µ–º–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
export const registerUserSchema = z
  .object({
    email: emailSchema,
    name: nonEmptyCleanString('Name'),
    password: passwordSchema,
    confirmPassword: passwordSchema,
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Passwords don't match",
    path: ['confirmPassword'],
  });

// üîê –°—Ö–µ–º–∞ –ª–æ–≥—ñ–Ω—É
export const loginUserSchema = z.object({
  email: emailSchema,
  password: passwordSchema,
});

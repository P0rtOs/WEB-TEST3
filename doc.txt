Тут буде опис повного шляху запиту та архітектури/відповідальностей


Для кращого розуміння спочатку шлях по якому йде запит:
1 app - тут ініціалізація всього
2 routes - опис ендпоінтів та middleware
3 middleware - базово перевіряє і передає в контролер
4 controller - передає запит в сервіс, отримавши відповідь потім формує респонс
5 service - парсить, обробляє та передає моделі
6 model - модель звертається до бд і потім запит повертається ->сервіс->контролер



Стосовно архітектури та відповідальностей:
app - ініціалізація express

Допоміжні файли:
config/ - тут файл який читає всі змінні з .env та файли для ініціалізації sequelize
types/ - Опис всіх потрібних типів.
schemas/ - zod схеми, використаємо в валідації

middlewares/
В middleware хендлери помилок, також в якості middleware виступає validation/
validation/ - для юзерів та фільмів тут відбуваєтсья валідація за допомогою zod схем.
Також тут відбувається перевірка токена, 
всі функції обробки токенів в /utils/TokenFunctions

controllers/
Після валідації запит потрапляє в контролер:
Відповідальність контролера: Формування респонсу. 
Тобто отримавши результат від сервісу контролер сформує json як це описано в ТЗ

services/
Сервіс відповідає за бізнес-логіку. Різні функції/зміни та таке інше має бути саме тут

models/
Головна відповідальність моделі - робота з БД.
Якщо потрібно звернутись до бд це має відбуватись через методи відповідної моделі

utils/
Тут знаходяться об'єкти логера, які потім використовуємо для логування.
Також тут знаходяться функції які мали б бути в сервісі, але 
вони або великі, або повторювані тож я виніс їх в окремий файл







